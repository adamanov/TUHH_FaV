// Generated by gencpp from file controller_main/Num.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MAIN_MESSAGE_NUM_H
#define CONTROLLER_MAIN_MESSAGE_NUM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller_main
{
template <class ContainerAllocator>
struct Num_
{
  typedef Num_<ContainerAllocator> Type;

  Num_()
    : px(0)
    , py(0)
    , pz(0)
    , yaw(0)
    , pitch(0)
    , roll(0)  {
    }
  Num_(const ContainerAllocator& _alloc)
    : px(0)
    , py(0)
    , pz(0)
    , yaw(0)
    , pitch(0)
    , roll(0)  {
  (void)_alloc;
    }



   typedef int64_t _px_type;
  _px_type px;

   typedef int64_t _py_type;
  _py_type py;

   typedef int64_t _pz_type;
  _pz_type pz;

   typedef int64_t _yaw_type;
  _yaw_type yaw;

   typedef int64_t _pitch_type;
  _pitch_type pitch;

   typedef int64_t _roll_type;
  _roll_type roll;





  typedef boost::shared_ptr< ::controller_main::Num_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller_main::Num_<ContainerAllocator> const> ConstPtr;

}; // struct Num_

typedef ::controller_main::Num_<std::allocator<void> > Num;

typedef boost::shared_ptr< ::controller_main::Num > NumPtr;
typedef boost::shared_ptr< ::controller_main::Num const> NumConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller_main::Num_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller_main::Num_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller_main::Num_<ContainerAllocator1> & lhs, const ::controller_main::Num_<ContainerAllocator2> & rhs)
{
  return lhs.px == rhs.px &&
    lhs.py == rhs.py &&
    lhs.pz == rhs.pz &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller_main::Num_<ContainerAllocator1> & lhs, const ::controller_main::Num_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller_main

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::controller_main::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller_main::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_main::Num_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller_main::Num_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_main::Num_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller_main::Num_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller_main::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c1a5eba2c46b09a0f5a99beaba4b724f";
  }

  static const char* value(const ::controller_main::Num_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc1a5eba2c46b09a0ULL;
  static const uint64_t static_value2 = 0xf5a99beaba4b724fULL;
};

template<class ContainerAllocator>
struct DataType< ::controller_main::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller_main/Num";
  }

  static const char* value(const ::controller_main::Num_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller_main::Num_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 px\n"
"int64 py\n"
"int64 pz\n"
"\n"
"int64 yaw\n"
"int64 pitch\n"
"int64 roll\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::controller_main::Num_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller_main::Num_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.px);
      stream.next(m.py);
      stream.next(m.pz);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Num_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller_main::Num_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller_main::Num_<ContainerAllocator>& v)
  {
    s << indent << "px: ";
    Printer<int64_t>::stream(s, indent + "  ", v.px);
    s << indent << "py: ";
    Printer<int64_t>::stream(s, indent + "  ", v.py);
    s << indent << "pz: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pz);
    s << indent << "yaw: ";
    Printer<int64_t>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<int64_t>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<int64_t>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MAIN_MESSAGE_NUM_H
