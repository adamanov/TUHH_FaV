<launch>
    <arg name="est" default="ekf2" />
    <arg name="vehicle" default="uuv_bluerov2_heavy" />

    <!-- start the gazebo simulator and an empty world -->
     <!-- <include file="$(find bluerov_sim)/launch/gazebo_base.launch" /> -->
     <include file="$(find bluerov_sim)/launch/gazebo_tags.launch" />

    <!-- Spawn the vehicle. You can use the args to set the spawn pose-->
      <include file="$(find bluerov_sim)/launch/spawn_vehicle.launch">
    <!--  Set the position-->
        <arg name="camera" default="false" />
        <arg name="x" value="1.0" />
        <arg name="y" value="1.0" />
        <arg name="z" value="-1.0"/>
        <!-- Set roll, pitch, yaw-->
        <arg name="R" value="0.0" />
        <arg name="P" value="0.0" />
        <arg name="Y" value="1.5708" />
    </include>

    <!-- launch the tank -->
    <include file="$(find bluerov_sim)/launch/spawn_tank.launch"></include>

    <!-- Spawn the partition wall -->
    <!-- <node name="partition_wall_for_tank_1" pkg="gazebo_ros" type="spawn_model"
    args="-sdf -file $(find bluerov_sim)/models/partition_wall_for_tank_1/model.sdf
            -model partition_wall
            -x 0.0 -y 0.0 -z -0.0
            -R 0.0 -P 0.0 -Y 0.0" /> -->


    <!-- launch the range_sensor -->
    <include file="$(find range_sensor)/launch/range_sensor.launch"/>

    <!-- launch the object_detection -->
    <include file="$(find object_detection)/launch/object_detection.launch"/>


    <!-- Launch localization algorithm -->
    <include file="$(find localization)/launch/launch_localization.launch"></include>


    <!-- Launch sensor_processor Pkg -->
    <include file="$(find sensor_processor)/launch/sensor_processor.launch"></include>

    <!-- Launch path_planning PKG -->
    <include file="$(find path_planning)/launch/path_planning.launch"></include>

    <!-- Launch the nodes of controller Pkg -->
    <node name="controller_node" pkg="controller" type="controller_node.py" output="screen" />

    <node name="checkpoint" pkg="controller" type="checkpoint_node.py" output="screen" />

    <node name="OrientAdjustForPID" pkg="controller" type="orientation_adjustment_for_PID.py" output="screen" />
    

    <!-- launch nodes from bluerov_sim Pkg -->
    <node name="keyboard" pkg="bluerov_sim" type="keyboard_control.py" output="screen" />

    <node name="mixer" pkg="bluerov_sim" type="mixer.py" output="screen" />


    <!-- PID Controller for thrust, required to define a input topic as thrust/setpoint
                                                                        thrust/state-->
    <node name="controller_thrust" pkg="pid" type="controller" ns="thrust" output="screen">
        <param name="Kp" value="3.0" />
        <param name="Ki" value="0.0" />
        <param name="Kd" value="0.0" />
        <param name="upper_limit" value="1" />
        <param name="lower_limit" value="-1" />
        <param name="windup_limit" value="10" />
        <param name="max_loop_frequency" value="100.0" />
        <param name="min_loop_frequency" value="100.0" />
    </node>

    <!-- PID Controller for vertical_thrust required to define a input topic as  vertical_thrust/setpoint
                                                                                 vertical_thrust/state-->
    <node name="controller_vertical_thrust" pkg="pid" type="controller" ns="vertical_thrust" output="screen">
        <param name="Kp" value="0.4" />
        <param name="Ki" value="0.0" />
        <param name="Kd" value="0.0" />
        <param name="upper_limit" value="1" />
        <param name="lower_limit" value="-1" />
        <param name="windup_limit" value="10" />
        <param name="max_loop_frequency" value="100.0" />
        <param name="min_loop_frequency" value="100.0" />
    </node>
    <!-- PID Controller for lateral_thrust required to define a input topic as  lateral_thrust/setpoint
                                                                                lateral_thrust/state-->
    <node name="controller_lateral_thrust" pkg="pid" type="controller" ns="lateral_thrust" output="screen">
        <param name="Kp" value="3.0" />
        <param name="Ki" value="0.0" />
        <param name="Kd" value="0.0" />
        <param name="upper_limit" value="1" />
        <param name="lower_limit" value="-1" />
        <param name="windup_limit" value="10" />
        <param name="max_loop_frequency" value="100.0" />
        <param name="min_loop_frequency" value="100.0" />
    </node>

    <!-- PID Controller for orientation_Yaw required to define a input topic as  yaw/setpoint
                                                                                 yaw/state-->
    <node name="controller_yaw" pkg="pid" type="controller" ns="yaw" output="screen">
        <param name="Kp" value="0.3" />
        <param name="Ki" value="0.0" />
        <param name="Kd" value="0.0" />
        <param name="upper_limit" value="1" />
        <param name="lower_limit" value="-1" />
        <param name="windup_limit" value="10" />
        <param name="max_loop_frequency" value="100.0" />
        <param name="min_loop_frequency" value="100.0" />
    </node>

    <!--  PID Controller for pitch required to define a input topic as  pitch/setpoint
                                                                      pitch/state-->
    <!-- <node name="controller_pitch" pkg="pid" type="controller" ns="pitch" output="screen">
        <param name="Kp" value="0.0" />
        <param name="Ki" value="0.0" />
        <param name="Kd" value="0.0" />
        <param name="upper_limit" value="10" />
        <param name="lower_limit" value="-10" />
        <param name="windup_limit" value="10" />
        <param name="max_loop_frequency" value="100.0" />
        <param name="min_loop_frequency" value="100.0" />
    </node> -->
    <!-- PID Controller for roll required to define a input topic as  roll/setpoint
                                                                      roll/state-->
    <!-- <node name="controller_roll" pkg="pid" type="controller" ns="roll" output="screen">
        <param name="Kp" value="0.0" />
        <param name="Ki" value="0.0" />
        <param name="Kd" value="0.0" />
        <param name="upper_limit" value="10" />
        <param name="lower_limit" value="-10" />
        <param name="windup_limit" value="10" />
        <param name="max_loop_frequency" value="100.0" />
        <param name="min_loop_frequency" value="100.0" />
    </node> -->


    <!-- Launch the Plots here -->
    <node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" />

    <!-- <node name="rqt_robot_monitor" pkg="rqt_robot_monitor" type="rqt_robot_monitor" /> -->

    <!-- Play back data with rosbag -->
    <!-- <node pkg="rosbag" type="play" name="player" args="/home/sven/fav/bagfiles/2020-11-24-12-35-00.bag"> 
    </node> -->
    <!-- for rosbag -> rosbag record -a -->
</launch>
